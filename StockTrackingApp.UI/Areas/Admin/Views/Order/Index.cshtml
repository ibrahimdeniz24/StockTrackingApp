@using StockTrackingApp.Entities.Enums
@using StockTrackingApp.UI.Extantions
@using StockTrackingApp.UI.Areas.Admin.Models.OrderVMs
@model IEnumerable<StockTrackingApp.UI.Areas.Admin.Models.OrderVMs.AdminOrderListVM>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
    int row = 0;
}


<section class="section">
    <div class="row" id="table-hover-row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <!-- Order Create Butonu -->
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#orderCreateModal">
                        Yeni Sipariş Oluştur
                    </button>
                    <!-- Partial View Modal İçeriğini Yüklemek İçin Boş Modal Div -->
                    <div id="modalContainer">
                        @await Html.PartialAsync("_OrderCreateModal", new AdminOrderCreateVM())
                        @await Html.PartialAsync("_OrderUpdateModal", new AdminOrderUpdateVM())
                    </div>
                </div>
                <div class="card-content">
                    <div class="card-body">
                        <!-- Table with outer spacing -->
                        <div class="table-responsive">

                            <table class="table table-hover mb-0">
                                <thead>
                                    <tr>
                                        <th>
                                            #
                                        </th>
                                        <th>
                                            @Html.DisplayNameFor(model => model.OrderDate)
                                        </th>
                                        <th>
                                            @Html.DisplayNameFor(model => model.DeliveryDate)
                                        </th>
                                        <th>
                                            @Html.DisplayNameFor(model => model.CustomerName)
                                        </th>
                                        <th>
                                            @Html.DisplayNameFor(model => model.OrderStatus)
                                        </th>
                                        <th>
                                            @Html.DisplayNameFor(model => model.Description)
                                        </th>
                                        <th>
                                            @Html.DisplayNameFor(model => model.TotalAmount)
                                        </th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model)
                                    {
                                        row++;
                                        <tr>
                                            <td>
                                                @row
                                            </td>
                                            <td class="text-bold-500">
                                                @Html.DisplayFor(modelItem => item.OrderDate)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.DeliveryDate)
                                            </td>
                                            <td class="text-bold-500">
                                                @Html.DisplayFor(modelItem => item.CustomerName)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.OrderStatus)
                                            </td>
                                            <td class="text-bold-500">
                                                @Html.DisplayFor(modelItem => item.Description)
                                            </td>
                                            <td class="text-bold-500">
                                                @Html.DisplayFor(modelItem => item.TotalAmount)
                                            </td>
                                            <td>
                                                <div class="btn-group dropend me-1 mb-1">

                                                    <button class="btn btn-light rounded-pill  dropdown-toggle" type="button"
                                                            id="dropdownMenuButton" data-bs-toggle="dropdown"
                                                            aria-haspopup="true" aria-expanded="false">
                                                        Seçenekler
                                                    </button>
                                                    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                                        <a data-bs-toggle="modal" data-bs-target="#updateOrderModal" asp-route-id="@item.Id" data-item-id="@item.Id" class="dropdown-item" data-kt-users-table-filter="delete_row">Düzenle</a>
                                                        <a class="dropdown-item" href="@Url.Action("Details", "Order", new { id = item.Id })">Details</a>

                                                    </div>

                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</section>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="~/AdminLayout/addedjs/Datetimeflatpickr/datetimeFlatpickr.js"></script>

<script>
    $(document).ready(function () {
        $('#updateOrderModal').on('show.bs.modal', function (event) {
            let button = $(event.relatedTarget);
            let itemId = button.data('item-id');


            let modal = $(this);
            modal.find('input[name="Id"]').val(itemId);

        });
    });
</script>
<script>
        $(document).ready(function () {
            $("#customerDropdown").select2({
                placeholder: "Müşteri Ara...",
                allowClear: true,
                minimumInputLength: 1,
                dropdownParent: $("#customerDropdown").parent(), // Bu satırı ekle modal oldugu için bu ekledik
                ajax: {
                    url: "@Url.Action("GetCustomers", "Order", new { area = "Admin" })",
                    dataType: "json",
                    delay: 250,
                    data: function (params) {
                        return { term: params.term };
                    },
                    processResults: function (data) {
                        return {
                            results: $.map(data, function (item) {
                                return { id: item.id, text: item.text };
                            })
                        };
                    }
                }
            });
        });




    $(document).ready(function () {
        initSelect2(0);
    });

    function initSelect2(index) {
        $(`#stockDropdown${index}`).select2({
            placeholder: "Stok Ara...",
            allowClear: true,
            minimumInputLength: 1,
            dropdownParent: $(`#stockDropdown${index}`).parent(),
            ajax: {
                url: "@Url.Action("GetStocks", "Order", new { area = "Admin" })",
                dataType: "json",
                delay: 250,
                data: function (params) {
                    return { term: params.term };
                },
                processResults: function (data) {
                    return {
                        results: $.map(data, function (item) {
                            return { id: item.id, text: item.text };
                        })
                    };
                }
            }
        });
    }

    function addOrderDetail() {
        var index = $("#orderDetailsBody tr").length;
        var rowHtml = `
    <tr>
        <td>
            <select id="stockDropdown${index}" name="AdminOrderDetailCreateVMs[${index}].StockId" class="form-control stockDropdown" required></select>
        </td>
        <td>
            <input name="AdminOrderDetailCreateVMs[${index}].Quantity" pattern="[0-9]+"  class="form-control quantity" min="1" oninput="calculateTotal(this)" required />
        </td>
        <td>
            <input name="AdminOrderDetailCreateVMs[${index}].UnitPrice" pattern="[0-9]+([,][0-9]+)?" step="0.01" class="form-control unitPrice" min="0" oninput="calculateTotal(this)" required />
        </td>
        <td>
            <input name="AdminOrderDetailCreateVMs[${index}].TotalPriceExcludingVAT"  step="0.01" class="form-control TotalPriceExcludingVAT" readonly />
        </td>
        <td>
            <select name="AdminOrderDetailCreateVMs[${index}].VatRate" class="form-control vatRate" required onchange="calculateTotal(this)">
                @foreach (var vatRate in Enum.GetValues(typeof(VatRate)).Cast<VatRate>())
                {
                    <option value="@((int)vatRate)">
                        @vatRate.GetDisplayName()
                     </option>
                }
            </select>
        </td>
        <td>
            <input name="AdminOrderDetailCreateVMs[${index}].TotalPriceIncludingVAT"  step="0.01" class="form-control totalVat" readonly />
        </td>
        <td>
            <input name="AdminOrderDetailCreateVMs[${index}].TotalPriceIncludingVAT"  step="0.01" class="form-control totalPriceVat" readonly />
        </td>
        <td>
            <button type="button" class="btn btn-danger" onclick="removeOrderDetail(this)">Sil</button>
        </td>
    </tr>`;

        $("#orderDetailsBody").append(rowHtml);
        initSelect2(index); // Yeni eklenen dropdown için Select2 başlat
        updateOrderDetailIndexes(); // Index'leri güncelle
    }

    function removeOrderDetail(button) {
        $(button).closest("tr").remove();
        updateOrderDetailIndexes(); // Silme işleminden sonra index'leri güncelle
        updateTotalOrderAmount(); // Toplam tutarı güncelle
    }

    function calculateTotal(input) {
        var row = $(input).closest("tr");

        // Input değerlerini al ve virgülü noktaya çevir
        var quantity = row.find(".quantity").val().trim().replace(",", ".");
        var unitPrice = row.find(".unitPrice").val().trim().replace(",", ".");
        var vatRate = row.find(".vatRate").val().trim().replace(",", ".");

        console.log("Raw Inputs:", { quantity, unitPrice, vatRate }); // Hata ayıklama için

        // Sayılara çevir (geçersizse 0 yap)
        quantity = isNaN(parseFloat(quantity)) ? 0 : parseFloat(quantity);
        unitPrice = isNaN(parseFloat(unitPrice)) ? 0 : parseFloat(unitPrice);
        vatRate = isNaN(parseFloat(vatRate)) ? 0 : parseFloat(vatRate);

        console.log("Parsed Inputs:", { quantity, unitPrice, vatRate });

        // Negatif değerleri engelle
        if (quantity < 0 || unitPrice < 0 || vatRate < 0) {
            alert("Geçersiz değerler! Miktar, birim fiyat ve KDV oranı sıfırdan küçük olamaz.");
            return;
        }

        // Toplam hesaplamalar
        var total = quantity * unitPrice;
        var vatAmount = total * vatRate / 100;
        var totalWithVat = total + vatAmount;

        console.log("Total Calculation:", { total, vatAmount, totalWithVat });

        // Değerleri Türkçe formatta yaz (noktayı tekrar virgüle çevir)
        row.find(".TotalPriceExcludingVAT").val(total.toFixed(2).replace(".", ","));
        row.find(".totalVat").val(vatAmount.toFixed(2).replace(".", ","));
        row.find(".totalPriceVat").val(totalWithVat.toFixed(2).replace(".", ","));

        // Sipariş toplamını güncelle
        updateTotalOrderAmount();
    }




    function updateTotalOrderAmount() {
        var totalExcludingAmount = 0; // Toplam KDV Hariç Tutar
        var totalVat = 0; // Toplam KDV Tutarı
        var totalWithVat = 0; // Toplam KDV Dahil Tutar

        $(".TotalPriceExcludingVAT").each(function () {
            var amount = parseFloat($(this).val().replace(",", ".")) || 0;
            totalExcludingAmount += amount;
        });

        $(".totalPriceVat").each(function () {
            var amountWithVat = parseFloat($(this).val().replace(",", ".")) || 0;
            totalWithVat += amountWithVat;
        });

        totalVat = totalWithVat - totalExcludingAmount; // KDV tutarını hesapla

        // Değerleri ilgili input alanlarına yaz (Türkçe formatta virgüllü olarak)
        $("#TotalExcludingVATAmount").val(totalExcludingAmount.toFixed(2).replace(".", ",")); // Toplam KDV hariç tutar
        $("#TotalVATAmount").val(totalVat.toFixed(2).replace(".", ",")); // Toplam KDV tutarı
        $("#TotalAmount").val(totalWithVat.toFixed(2).replace(".", ",")); // Toplam KDV dahil tutar
    }



    // Sipariş detay satırları silindiğinde index'leri günceller
    function updateOrderDetailIndexes() {
        $("#orderDetailsBody tr").each(function (index, row) {
            $(row).find("select, input").each(function () {
                var nameAttr = $(this).attr("name");
                if (nameAttr) {
                    var newName = nameAttr.replace(/\[\d+\]/, `[${index}]`);
                    $(this).attr("name", newName);
                }
            });

            // ID güncelleme
            var stockDropdown = $(row).find(".stockDropdown");
            stockDropdown.attr("id", `stockDropdown${index}`);
            initSelect2(index); // Güncellenen ID için Select2 başlat
        });
    }

</script>


