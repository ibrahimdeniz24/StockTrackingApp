@using StockTrackingApp.Entities.Enums
@using X.PagedList
@using StockTrackingApp.UI.Extantions
@using StockTrackingApp.UI.Areas.Admin.Models.OrderVMs
@model IPagedList<StockTrackingApp.UI.Areas.Admin.Models.OrderVMs.AdminOrderListVM>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
    int row = 0;
}


<section class="section">
    <div class="row" id="table-hover-row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <!-- Order Create Butonu -->
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#orderCreateModal">
                        Yeni Sipariş Oluştur
                    </button>

                    <!-- Modal Container -->
                    <div id="modalContainer">
                        @await Html.PartialAsync("_OrderCreateModal", new AdminOrderCreateVM())
                        @await Html.PartialAsync("_OrderUpdateModal", new AdminOrderUpdateVM())
                    </div>

                    <!-- Arama Formu -->
                    <form method="get" class="d-flex">
                        <input type="text" class="form-control w-auto me-2" name="searchTerm" value="@ViewBag.SearchTerm" placeholder="Müşteri Adı ile Ara" />
                        <button type="submit" class="btn btn-secondary">Ara</button>
                    </form>
                </div>
                <div class="card-content">
                    <div class="card-body">
                        <!-- Table with outer spacing -->
                        <div class="table-responsive">

                            <table class="table table-hover mb-0">
                                <thead>
                                    <tr>
                                        <th>
                                            #
                                        </th>
                                        <th>
                                            OrderDate
                                        </th>
                                        <th>
                                            DeliveryDate
                                        </th>
                                        <th>
                                            CustomerName
                                        </th>
                                        <th>
                                            OrderStatus
                                        </th>
                                        <th>
                                            Description
                                        </th>
                                        <th>
                                            TotalAmount
                                        </th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model)
                                    {
                                        row++;
                                        <tr>
                                            <td>
                                                @row
                                            </td>
                                            <td class="text-bold-500">
                                                @Html.DisplayFor(modelItem => item.OrderDate)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.DeliveryDate)
                                            </td>
                                            <td class="text-bold-500">
                                                @Html.DisplayFor(modelItem => item.CustomerName)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.OrderStatus)
                                            </td>
                                            <td class="text-bold-500">
                                                @Html.DisplayFor(modelItem => item.Description)
                                            </td>
                                            <td class="text-bold-500">
                                                @Html.DisplayFor(modelItem => item.TotalAmount)
                                            </td>
                                            <td>
                                                <div class="btn-group dropend me-1 mb-1">

                                                    <button class="btn btn-light rounded-pill  dropdown-toggle" type="button"
                                                            id="dropdownMenuButton" data-bs-toggle="dropdown"
                                                            aria-haspopup="true" aria-expanded="false">
                                                        Seçenekler
                                                    </button>
                                                    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                                        <a data-bs-toggle="modal" data-bs-target="#orderUpdateModal" asp-route-id="@item.Id" data-order-id="@item.Id" class="dropdown-item edit-order" data-kt-users-table-filter="delete_row">Düzenle</a>
                                                        <a class="dropdown-item" href="@Url.Action("Details", "Order", new { id = item.Id })">Details</a>

                                                    </div>

                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>

                        </div>
                        <!-- Sayfalama (Pagination) -->
                        <nav aria-label="Page navigation example">
                            <ul class="pagination pagination-primary justify-content-end">
                                @if (Model.HasPreviousPage)
                                {
                                    <li class="page-item">
                                        <a class="page-link" href="@Url.Action("Index", new { page = Model.PageNumber - 1 })">Önceki</a>
                                    </li>
                                }
                                else
                                {
                                    <li class="page-item disabled">
                                        <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Önceki</a>
                                    </li>
                                }

                                @for (int i = 1; i <= Model.PageCount; i++)
                                {
                                    <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                                        <a class="page-link" href="@Url.Action("Index", new { page = i })">@i</a>
                                    </li>
                                }

                                @if (Model.HasNextPage)
                                {
                                    <li class="page-item">
                                        <a class="page-link" href="@Url.Action("Index", new { page = Model.PageNumber + 1 })">Sonraki</a>
                                    </li>
                                }
                                else
                                {
                                    <li class="page-item disabled">
                                        <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Sonraki</a>
                                    </li>
                                }
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </div>

</section>
<script>
    var customerDropdownUrl = '@Url.Action("GetCustomers", "Order", new { area = "Admin" })';
    var stockDropdownUrl = '@Url.Action("GetStocks", "Order", new { area = "Admin" })';
    var vatRatesHtml = `@Html.Raw(string.Join("", Enum.GetValues(typeof(VatRate)).Cast<VatRate>().Select(v => $"<option value=\"{(int)v}\">{v.GetDisplayName()}</option>")))`;
</script>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="~/AdminLayout/addedjs/Datetimeflatpickr/datetimeFlatpickr.js"></script>
<script src="~/AdminLayout/addedjs/Order/order.js"></script>
<script src="~/AdminLayout/addedjs/Order/orderCreate.js"></script>
<script src="~/AdminLayout/addedjs/Order/orderUpdate.js"></script>


<script>
             $(document).ready(function () {
        $('#orderUpdateModal').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget);
            var orderId = button.data('order-id'); // Butondaki data-order-id değeri alınır

            console.log("Seçilen Order ID:", orderId); // Test için kontrol et

            if (!orderId || orderId === "00000000-0000-0000-0000-000000000000") {
                alert("Sipariş ID'si geçersiz!");
                return;
            }

            var modal = $(this);

            // 🟢 AJAX ile sipariş detaylarını al
            $.ajax({
                url: '/Admin/Order/Detailsjson', // Doğru URL olduğundan emin ol
                type: 'GET',
                data: { id: orderId },
                success: function(response) {
                    console.log(response); // Gelen veriyi kontrol et (Test amaçlı)

                    if (response && response.success && response.order) {
                        var order = response.order;

                        // Modal içindeki inputları doldur
                        modal.find('input[name="Id"]').val(order.Id);
                        modal.find('input[name="OrderDate"]').val(order.OrderDate);
                        modal.find('input[name="DeliveryDate"]').val(order.DeliveryDate);
                        modal.find('textarea[name="Description"]').val(order.Description);
                        modal.find('select[name="CustomerId"]').val(order.CustomerId);
                        modal.find('select[name="OrderStatus"]').val(order.OrderStatus);

                        // 🟢 Sipariş detaylarını dinamik eklemek (varsa)
                        var detailsContainer = modal.find('#orderDetailsContainer');
                        detailsContainer.empty(); // Önce eski veriyi temizle

                        order.OrderDetails.forEach(function (detail) {
                            detailsContainer.append(`
                                <div>
                                    <p>Ürün: ${detail.ProductName}</p>
                                    <p>Miktar: ${detail.Quantity}</p>
                                    <p>Fiyat: ${detail.Price}</p>
                                </div>
                            `);
                        });

                    } else {
                        alert('Sipariş bilgisi bulunamadı!');
                    }
                },
                error: function() {
                    alert('Veri yüklenirken hata oluştu.');
                }
            });
        });
    });





        // 🟢 Modal açılmadan önce inputları sıfırla
    $('#orderCreateModal').on('show.bs.modal', function () {
        $(this).find("input, select").each(function () {
            if ($(this).is("select")) {
                $(this).val(null).trigger("change"); // Select2 dropdownları sıfırla
            } else {
                $(this).val(""); // Input alanlarını sıfırla
            }
        });
    });

</script>





